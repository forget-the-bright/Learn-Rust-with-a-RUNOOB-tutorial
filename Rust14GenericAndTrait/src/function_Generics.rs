//在函数中定义泛型
pub fn function_Generics() {
    /// 寻找给定切片中的最大元素。
    ///
    /// # 参数
    /// `array`: 一个可比较元素的切片引用。
    ///
    /// # 返回值
    /// 返回切片中的最大元素。
    ///
    /// # 限制条件
    /// - `T`: 泛型参数必须实现`PartialOrd`和`Copy`特质。
    ///   - `PartialOrd`: 是 Rust 标准库中的一个特质，它提供了部分有序性的概念。当一个类型实现了 PartialOrd，
    ///          意味着你可以对这个类型的值进行比较，使用诸如 <, <=, >, >= 操作符来判断它们之间的大小关系。这通常用于数值类型或任何可以有意义地进行大小比较的数据类型
    ///   - `Copy`: 特质表示一个类型是“复制”安全的，也就是说，当一个值被赋给另一个变量时，原始值不会被移动，而是会被复制。
    ///              这意味着类型必须是较小的固定大小类型，比如基本的数值类型（如 i32, f64），或者是这些基本类型的小组合。Copy 类型的实例可以在不调用任何构造函数的情况下直接被复制到另一个位置，因此它们的复制成本较低。
    ///
    fn max<T>(array: &[T]) -> T
    where
        T: PartialOrd + Copy,
    {
        // 初始化最大元素的索引为0
        let mut max_index = 0;

        // 从索引1开始遍历，因为已将索引0设为最大值的初始候选
        let mut i = 1;

        // 遍历切片中的每个元素，直到最后一个元素
        while i < array.len() {
            // 如果当前元素大于最大候选元素，则更新最大候选元素的索引
            if array[i] > array[max_index] {
                max_index = i;
            }

            // 移动到下一个元素
            i += 1;
        }

        // 返回找到的最大元素
        array[max_index]
    }
    let a = [2, 4, 6, 3, 1];
    println!("i32 max = {}", max(&a));
    let a = [2.0, 40.21, 6.23, 3.01, 122.78];
    println!("f64 max = {}", max(&a));
}

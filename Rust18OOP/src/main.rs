/*
Rust 面向对象
面向对象的编程语言通常实现了数据的封装与继承并能基于数据调用方法。
Rust 不是面向对象的编程语言，但这些功能都得以实现。
*/
mod packaging;

/*
封装
封装就是对外显示的策略，在 Rust 中可以通过模块的机制来实现最外层的封装，
并且每一个 Rust 文件都可以看作一个模块，模块内的元素可以通过 pub 关键字对外明示。这一点在"组织管理"章节详细叙述过。
"类"往往是面向对象的编程语言中常用到的概念。"类"封装的是数据，是对同一类数据实体以及其处理方法的抽象。
在 Rust 中，我们可以使用结构体或枚举类来实现类的功能
*/

mod second;
use second::ClassName;
fn main() {
    let object = ClassName::new(1024);
    object.public_method();
}

/*
继承
几乎其他的面向对象的编程语言都可以实现"继承"，并用"extend"词语来描述这个动作。

继承是多态（Polymorphism）思想的实现，多态指的是编程语言可以处理多种类型数据的代码。
在 Rust 中，通过特性（trait）实现多态。有关特性的细节已在"特性"章节给出。
但是特性无法实现属性的继承，只能实现类似于"接口"的功能，所以想继承一个类的方法最好在"子类"中定义"父类"的实例。
总结地说，Rust 没有提供跟继承有关的语法糖，也没有官方的继承手段（完全等同于 Java 中的类的继承），但灵活的语法依然可以实现相关的功能。

参照之前特性章节中的"trait 对象"，我们也可以使用 trait 对象来实现继承。
*/
